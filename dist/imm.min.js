//! Imm
//! Immutable collections
//! (c) 2015 Sebastian Porto
//! MIT license.
//! https://github.com/sporto/imm
!function(r,t){if("function"==typeof define&&define.amd)define(["Immutable"],function(n){return r.imm=t(n)});else if("object"==typeof exports){var n=require("seamless-immutable");module.exports=t(n)}else r.imm=t(r.Immutable)}(this,function(r){"use strict";function t(r){return l(r)?r:[r]}function n(r){return r.map(function(r){return""+r})}function e(r,t){if(!t)throw new Error("Must provide a key");return r.map(function(r){return r[t]})}function u(t){return r.isImmutable(t)}function o(r){var t=u(r);if(!t)throw new Error("Not an immutable object")}function i(r){var t=!l(r),n=u(r);if(t||n)throw new Error("You must provide an array")}function f(r,t){return a(r,t)}function a(t,n){i(t),n=n||m;var e=r(t).asObject(function(r){return[r[n],r]});return c(e,n)}function c(r,u){function i(r){return a(r,u)}function f(r){return c(r,u)}function l(r,n){if(n&&n.strict){var o=t(r),i=e(o,u);if(v(i))throw new Error("Some records already exist")}return j(r)}function s(n){for(var e=t(n),u=0;u<e.length;u++){var o=e[u];if(!r[o])return!1}return!0}function v(n){for(var e=t(n),u=0;u<e.length;u++){var o=e[u];if(r[o])return!0}return!1}function d(){return h()}function h(){return Object.keys(r).map(function(t){return r[t].asMutable()})}function w(){return Object.keys(r).length}function b(r){var t=h();return t=t.filter(r),i(t)}function p(r){for(var t=h(),n=0;n<t.length;n++){var e=t[n];if(r(e))return e}return void 0}function y(t){var n=r[t];return n?n.asMutable():void 0}function g(r){var t=h();return t.map(r)}function E(e,u){var o=t(e);if(o=n(o),u&&u.strict&&!s(o))throw new Error("Some records do not exist");var i=r.without(o);return f(i)}function j(o){var i,a,c=t(o),m=e(c,u);m=n(m);for(var l=r.without(m),s={},v=0;v<c.length;v++){if(i=c[v],a=i[u],!a)throw new Error("Record must have ."+u);s[a]=i}return l=l.merge(s),f(l)}function x(){return r}function I(n){for(var e,o,i,a,c,m=t(n),l=r,s=0;s<m.length;s++){if(o=m[s],e=o[u],!e)throw new Error("Record must have ."+u);a=r[e],c=a?a.merge(o):o,i={},i[e]=c,l=l.merge(i)}return f(l)}return o(r),u=u||m,{isImm:!0,add:l,allExist:s,anyExist:v,array:d,count:w,filter:b,find:p,get:y,replace:j,map:g,remove:E,toImmutable:x,update:I}}if(null==r)throw new Error("Immutable is null");var m="id",l=Array.isArray||function(r){return"[object Array]"===toString.call(r)};return f});
//! Imm
//! Immutable collections
//! (c) 2015 Sebastian Porto
//! MIT license.
//! https://github.com/sporto/imm
!function(r,n){if("function"==typeof define&&define.amd)define(["Immutable"],function(t){return r.imm=n(t)});else if("object"==typeof exports){var t=require("seamless-immutable");module.exports=n(t)}else r.imm=n(r.Immutable)}(this,function(r){"use strict";function n(r){return l(r)?r:[r]}function t(r){return r.map(function(r){return""+r})}function e(r,n){if(!n)throw new Error("Must provide a key");return r.map(function(r){return r[n]})}function u(n){return r.isImmutable(n)}function o(r){var n=u(r);if(!n)throw new Error("Not an immutable object")}function i(r){var n=!l(r),t=u(r);if(n||t)throw new Error("You must provide an array")}function f(r,n){return a(r,n)}function a(n,t){i(n),t=t||m;var e=r(n).asObject(function(r){return[r[t],r]});return c(e,t)}function c(r,u){function i(r){return a(r,u)}function f(r){return c(r,u)}function l(r,t){if(t&&t.strict){var o=n(r),i=e(o,u);if(d(i))throw new Error("Some records already exist")}return E(r)}function s(){return v()}function v(){return Object.keys(r).map(function(n){return r[n].asMutable()})}function d(t){for(var e=n(t),u=0;u<e.length;u++){var o=e[u];if(!r[o])return!1}return!0}function h(){return Object.keys(r).length}function w(r){var n=v();return n=n.filter(r),i(n)}function b(r){for(var n=v(),t=0;t<n.length;t++){var e=n[t];if(r(e))return e}return void 0}function p(n){var t=r[n];return t?t.asMutable():void 0}function y(r){var n=v();return n.map(r)}function g(e){var u=n(e);u=t(u);var o=r.without(u);return f(o)}function E(o){var i,a,c=n(o),m=e(c,u);m=t(m);for(var l=r.without(m),s={},v=0;v<c.length;v++){if(i=c[v],a=i[u],!a)throw new Error("Record must have ."+u);s[a]=i}return l=l.merge(s),f(l)}function j(){return r}function I(t){for(var e,o,i,a,c,m=n(t),l=r,s=0;s<m.length;s++){if(o=m[s],e=o[u],!e)throw new Error("Record must have ."+u);a=r[e],c=a?a.merge(o):o,i={},i[e]=c,l=l.merge(i)}return f(l)}return o(r),u=u||m,{isImm:!0,add:l,array:s,count:h,exist:d,filter:w,find:b,get:p,replace:E,map:y,remove:g,toImmutable:j,update:I}}if(null==r)throw new Error("Immutable is null");var m="id",l=Array.isArray||function(r){return"[object Array]"===toString.call(r)};return f});